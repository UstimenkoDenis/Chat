{"version":3,"sources":["components/app-header/index.js","components/app-header/app-header.js","components/search-panel/index.js","components/search-panel/search-panel.js","components/post-status-filter/index.js","components/post-status-filter/post-status-filter.js","components/post-list-item/index.js","components/post-list-item/post-list-item.js","components/post-list/index.js","components/post-list/post-list.js","components/post-add-form/index.js","components/post-add-form/post-add-form.js","components/app/index.js","components/app/app.js","index.js"],"names":["AppHeader","liked","allPosts","className","SearchPanel","props","state","term","onUpdateSearch","bind","e","target","value","this","setState","type","placeholder","onChange","Component","PostStatusFilter","buttons","name","label","filter","onFilterSelect","map","clazz","key","onClick","PostListItem","onDelete","onToggleImportant","onToggleLiked","classNames","important","like","PostList","posts","elements","item","obj","isEmpty","id","itemProps","PostAddForm","text","onValueChange","onSubmit","preventDefault","onAdd","App","data","deleteItem","addItem","maxId","items","length","indexOf","index","findIndex","elem","slice","body","newItem","makeArray","property","old","visiblePosts","filterPost","searchPost","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.cfd036fa.chunk.js","sourcesContent":["import AppHeader from './app-header'\r\nexport default AppHeader;","import React from 'react';\r\n\r\nimport './app-header.css';\r\n\r\n\r\nconst AppHeader = ({liked,allPosts}) => { // сюда приходят props - и мы их сразу деструктурируем\r\n    return (\r\n        <div className = 'app-header d-flex'> \r\n            <h1>Denis Ustimenko</h1>\r\n    <h2> {allPosts} записей, из них понравилось {liked}</h2> \r\n        </div>\r\n    );\r\n}\r\n\r\nexport default AppHeader;","import SearchPanel from './search-panel'\r\nexport default SearchPanel;","import React, {Component} from 'react';\r\n\r\nimport './search-panel.css';\r\n\r\n\r\nexport default class SearchPanel extends Component{\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            term: ''\r\n        }\r\n\r\n        this.onUpdateSearch = this.onUpdateSearch.bind(this);\r\n    }\r\n// тут сначала записываем содержимое нашего инпута в state  SearchPanel, а потом выполняем функцию onUpdateSearch \r\n// которую мы получили в props из app.js  в нее мы помещаем аргумент term с содержанием input \r\n    onUpdateSearch(e) {\r\n        const term = e.target.value;\r\n        this.setState({term}); // здесь данный state так же не зависит от предыдущего поэтому callback не нужна\r\n                            // тут новый синтаксис это тоже самое что написать term: term\r\n        this.props.onUpdateSearch(term); // здесь не рекурсия!! Эту функцию мы пропишем в app.js потому что нам необходимо обновить\r\n        // state не только здесь но и в нашем компоненте app \r\n    } \r\n\r\n\r\n    render() {\r\n        return (\r\n            <input\r\n                className = \"form-control search-input\"\r\n                type = \"text\"\r\n                placeholder = \"Поиск по записям\"\r\n                onChange = {this.onUpdateSearch} // эта функция будет следить за тем что будет вводить пользователь и изменять state\r\n            />\r\n        )\r\n    }\r\n    \r\n}","import PostStatusFilter from './post-status-filter';\r\nexport default PostStatusFilter;","import React, {Component} from 'react';\r\n\r\nimport './post-status-filter.css'\r\n\r\nexport default class PostStatusFilter extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.buttons = [\r\n            {name: 'all', label: 'Все'}, \r\n            {name: 'like', label: 'Понравилось'} // теперь даже если кнопок станет больше намного легче станет их формировать\r\n\r\n        ] // здесь name будет наш уникальный ключ\r\n    }\r\n    render () {\r\n        const {filter, onFilterSelect} = this.props;\r\n        const buttons = this.buttons.map(({name, label})=>{\r\n            const active = filter === name ;// из props filter мы получаем состояние filter в app.js и сравниваем с name \r\n            // в каждом элементе и если они совпадут то это выражение будет true и  active будет true для данного элемента\r\n            const clazz = active ? 'btn-info' : 'btn-outline-secondary';\r\n            return ( // когда у нас будут формироваться кнопки - у нас создастся обработчик события который будет \r\n                // передавать name - уникальный ключ (либо all либо like  или другой если у нас будет больше кнопок)\r\n                 <button \r\n                    key = {name} \r\n                    type =\"button\"  \r\n                    className = {`btn ${clazz}`}\r\n                    onClick = {()=>onFilterSelect(name)} >\r\n                    {label}</button>\r\n            )\r\n        });\r\n        return (\r\n            <div className = \"btn-group\" >\r\n                    {buttons}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import PostListItem from './post-list-item'\r\nexport default PostListItem;","import React, { Component } from 'react';\r\n\r\nimport './post-list-item.css'\r\n\r\nexport default class PostListItem extends Component{\r\n   \r\n\r\n    render () {\r\n        const  {label, onDelete, onToggleImportant, onToggleLiked, important, like} = this.props;\r\n      \r\n        let classNames = 'app-list-item d-flex justify-content-between' \r\n        if (important) {\r\n            classNames +=' important'; \r\n        }\r\n        if (like) { // true\r\n            classNames +=' like'; \r\n        }\r\n\r\n        return (\r\n            <div className = {classNames}>\r\n                <span className = \"app-list-item-label\"\r\n                      onClick = {onToggleLiked}>\r\n                    {label}\r\n                </span>\r\n                <div className = \"d-flex justify-content-center align-items-center\">\r\n                    <button \r\n                        type = \"button\"\r\n                        className = \"btn-star btn sm\"\r\n                        onClick = {onToggleImportant}> \r\n                        <i className = \"fa fa-star\"></i>\r\n                    </button>\r\n                   {/* Здесь когда мы кликаем на иконку мусорной карзины передается событие в наш postList - там мы принимаем обрабатываем \r\n                   и передаем далее в app.js , в котором мы убираем нужный элемент из данных data и react увидит изменение и перерисует */}\r\n                    <button \r\n                        type = \"button\"\r\n                        className = \"btn-trash btn sm\"\r\n                        onClick = {onDelete}>  {/* этот обработчик событий будет приходить к нам из props*/}\r\n\r\n                        <i className = \"fa fa-trash-o\"></i>\r\n                    </button>\r\n                    <i className = \"fa fa-heart\"></i>\r\n\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n","import PostList from './post-list'\r\nexport default PostList;","import React from 'react';\r\nimport PostListItem from '../post-list-item';\r\n\r\nimport './post-list.css';\r\nimport PostStatusFilter from '../post-status-filter';\r\n\r\n\r\nconst PostList = ({posts, onDelete, onToggleImportant, onToggleLiked}) => { \r\n    \r\n       \r\n        const elements = posts.map( (item) => {\r\n            // Простой способ проверки на объект + содержится ли в нем информация\r\n            if ( typeof item === 'object' && isEmpty(item) ){ \r\n\r\n                const {id, ...itemProps} = item;\r\n\r\n                return (\r\n                    <li key = {id} className='list-group-item'>\r\n                        <PostListItem \r\n                                {...itemProps}\r\n                                onDelete = {()=> onDelete(id)}\r\n                                onToggleImportant = {()=>onToggleImportant(id)}\r\n                                onToggleLiked = {()=>onToggleLiked(id)}\r\n                                />  \r\n                    </li>\r\n                ) // теперь каждый пост знает об этих обработчиках событий \r\n            }\r\n        })\r\n        // console.log(elements);\r\n    \r\n        function isEmpty(obj) {\r\n            for(let key in obj)\r\n            {\r\n                return true;\r\n            }\r\n            return false;\r\n        }\r\n    \r\n        return (\r\n            <ul className=\"app-list list-group\">\r\n               {elements}\r\n            </ul>\r\n        )\r\n    }\r\n    \r\nexport default PostList;","import PostAddForm from './post-add-form'\r\nexport default PostAddForm;","import React, {Component} from 'react';\r\n\r\nimport './post-add-form.css';\r\n  \r\nexport default class PostAddForm extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n\r\n            text: ''\r\n        }\r\n\r\n        this.onValueChange = this.onValueChange.bind(this);\r\n        this.onSubmit = this.onSubmit.bind(this);\r\n    }\r\n\r\n    onValueChange(e) {\r\n        // console.log(e.target.value);\r\n       this.setState({ // здесь мы можем не передавть внутрь callback функцию потому что здесь наш state не зависит от предыдущего\r\n            text: e.target.value\r\n        })\r\n    }\r\n\r\n    onSubmit(e) {\r\n        e.preventDefault(); // позволяет отменить стандартное поведение браузера и стандартную отправку формы\r\n        this.props.onAdd(this.state.text); // выполняем функцию addItem из app.js, которая пришла к нам в props со свойствм onAdd\r\n        this.setState({\r\n            text: ''\r\n        }); // - очишаем наш imput при отправке нашей формы\r\n    }\r\n\r\n    render () {\r\n        return (\r\n            <form \r\n                className = \"bottom-panel d-flex\"\r\n                onSubmit = {this.onSubmit}>\r\n                <input\r\n                    type = \"text\"\r\n                    placeholder = \" Очем вы думаете сейчас?\"\r\n                    className  = \"form-control new-post-label\"\r\n                    onChange = {this.onValueChange}\r\n                    value = {this.state.text} // таким образом при повторном render в наше value попадет то значение которое сейчас \r\n                                              // в нашем state. Теперь этот компонент у нас контролируемый - у нас есть связь между state\r\n                                              // и input \r\n                />\r\n                <button\r\n                    type = \"submit\"\r\n                    className = \"btn btn-outline-secondary\">\r\n                    Добавить\r\n                </button>\r\n            </form>\r\n        )//// onClick нам уже не нужен мы теперь будем отслеживать саму отправку формы\r\n    }\r\n         \r\n}\r\n// Мы на нашем input все время отслеживаем что происходит и помещаем в наш state text из input \r\n// Когда пользователь нажмет кнопку  - форма отправится и  унас будет создаваться новый пост, создается он при помощи функции onAdd\r\n// которая во внутрь своего body помещает state который у нас в текущий момент\r\n\r\n\r\n// Прооверяем и ничего не происходит так как броузер посьоянно обновляет страницу. Дело в том что если мы работаем с таким\r\n// элементом как форма мы должны отменять стандартное поведение браузера\r\n\r\n// для этого мы должны передать в функцию объект события e\r\n// и написать e.preventDefault()\r\n// onSubmit(e) {\r\n  //  e.preventDefault()\r\n//     this.props.onAdd(this.state.text);\r\n// }\r\n\r\n// теперь сделаем чтобы input очищался после введения\r\n// Познакомимся с таким понятием как - контролируемые элементы\r\n// Наш imput при помощи того что пользователь в него что то вводит - контролирует наше состояние элемента. Но кто же контролирует\r\n// наш input ?  то есть сейчас у нас нет обратной связи между нашим элементом и нашим состоянием в нашем компоненте - такой элемент\r\n// называется - неконтролируемым, потому что состояние ни как не может им управлять. В reacte такими компонентами могут быть\r\n// input, textArea и select  \r\n\r\n","// Чтобы применить свойство WebPack мы прописываем\r\nimport App from './app'\r\n\r\nexport default App;\r\n\r\n// Таким образом мы все что находится в app.js мы направляем в index.js","import React, {Component} from 'react';\r\nimport AppHeader from '../app-header'\r\nimport SearchPanel from '../search-panel'\r\nimport PostStatusFilter from '../post-status-filter';\r\nimport PostList from '../post-list';\r\nimport PostAddForm from '../post-add-form'\r\n\r\nimport './app.css'; \r\n\r\n\r\nexport default class App extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            data: [\r\n                {label: \"Going to learn React\", important: true, like: false, id: 1}, \r\n                {label: \"That is so good\", important: false, like: false, id: 2},\r\n                {label: \"I need a breek...\", important: false,like: false, id: 3}\r\n            ],\r\n            term: '',\r\n            filter: 'all' // будет говорить как именно отфильтровать посты\r\n        };\r\n        // здесь привязываем только обработчики событий!!!!\r\n        this.deleteItem = this.deleteItem.bind(this);\r\n        this.addItem = this.addItem.bind(this);\r\n        this.onToggleImportant = this.onToggleImportant.bind(this);\r\n        this.onToggleLiked = this.onToggleLiked.bind(this);\r\n        this.onUpdateSearch = this.onUpdateSearch.bind(this); \r\n        this.onFilterSelect = this.onFilterSelect.bind(this);\r\n\r\n        this.maxId = 4 ;\r\n    }\r\n    searchPost(items, term){ // \r\n        if (term.length === 0) { // если пользователь ничего не вводил или стер\r\n            return items // просто возвращаем наши данные\r\n        } \r\n        return items.filter((item)=>{\r\n            return item.label.indexOf(term) > -1 // в каждом элементе мы будем находить свойство label и внутри этого свойства будем\r\n            // находить то что ввел пользователь. Если мы этого не нашли то мы получим -1 а нас интересуют все посты как раз которые \r\n            // ввел пользователь\r\n            // Таким образом функция filter будет возвращать нам те посты которых будет содержаться то что ввел пользователь\r\n        })\r\n    }\r\n    onUpdateSearch(term) { // принимает строку поиска\r\n        this.setState({term}); // меняем наш term\r\n    }\r\n\r\n    onFilterSelect(filter) {\r\n        this.setState({filter});\r\n    }\r\n\r\n\r\n    // сюда попадет массив который возвратит функция searchPost() и  переменную filter \r\n    filterPost(items, filter) { // функция вернет нам массив данных у которых like true\r\n        if(filter === 'like') {\r\n            return items.filter(item=>item.like) // получим все те элементы которых like будет true \r\n        } else {  // если наш фильтр будет другой (в нашем случае это будет all )\r\n            return items; // все элементы которые попали в нашу функцию\r\n        }\r\n\r\n    }\r\n    deleteItem(id) {\r\n        this.setState(({data}) => {\r\n\r\n            const index = data.findIndex(elem => elem.id === id)\r\n            const newArray = [...data.slice(0, index), ...data.slice(index+1)]; \r\n\r\n            return {\r\n                data: newArray\r\n            }\r\n        });\r\n    }\r\n       \r\n    addItem(body) { \r\n        \r\n        const newItem = {\r\n            label: body,\r\n            important: false,\r\n            id: this.maxId++\r\n        }\r\n        this.setState(({data}) => {  \r\n                const newArr = [...data, newItem];\r\n                \r\n                return {\r\n                    data: newArr\r\n                }\r\n        \r\n        });\r\n    }\r\n// наш компонент postList будет принимать еще два обработчика событий\r\n// приставка on в названиях функций говорит что это обработчики событий\r\n\r\n\r\n\r\n// ...................................Домашняя работа\r\n\r\n    onToggleImportant(id) {   // id -  чтобы знать какой пост был отмечен\r\n      this.makeArray(id,'important')  \r\n    }\r\n\r\n    onToggleLiked(id) { // id -  чтобы знать какой пост был отмечен\r\n        this.makeArray(id,'like')  ;    \r\n     }\r\n \r\n    makeArray(id, property) {\r\n        return (\r\n            this.setState(({data})=>{ \r\n       \r\n                const index = data.findIndex(elem => elem.id === id); // если наш id совпадает с тем который был передан нашей функции\r\n                const old = data[index];\r\n                const newItem = property==='like'? {...old, like: !old.like}:{...old, important: !old.important}\r\n                const newArr = [...data.slice(0, index), newItem, ...data.slice(index+1)];\r\n               \r\n                return {\r\n                    data: newArr\r\n                }\r\n            })\r\n        );\r\n    }\r\n/////////////////////////////////////////////////////////////////////////////////////////////\r\n    \r\n    render () {\r\n        const {data, term, filter  } = this.state // вытаскиваем data\r\n        const liked = data.filter(item => item.like).length; //true (получим массив и количество элементов узнаем через length)\r\n        const allPosts = data.length;\r\n\r\n        // const visiblePosts = this.searchPost(data, term); //теперь мы основали наши видимые посты на основе того что ввел пользователь\r\n        const visiblePosts = this.filterPost(this.searchPost(data, term), filter); // обернули в функцию\r\n// filterPost имеет два аргумента первый будет наш массив который возвращает this.searchPost(), а второй - наш фильтр filter  \r\n\r\n\r\n        // передадим эти переменные в AppHeader\r\n        return (\r\n            <div className = \"app\">  \r\n                <AppHeader\r\n                        allPosts = {allPosts}\r\n                        liked = {liked}\r\n                />\r\n                <div className = \"search-panel d-flex\">  \r\n                    <SearchPanel\r\n                        onUpdateSearch = {this.onUpdateSearch}/>\r\n\r\n                    <PostStatusFilter\r\n                                filter = {filter}\r\n                                onFilterSelect = {this.onFilterSelect}/>\r\n                </div>\r\n                <PostList \r\n                        // posts = {this.state.data}\r\n                        posts = {visiblePosts } // теперь мы берем не все посты а толко те которые необходимо отобразить на странице\r\n\r\n                        onDelete = {this.deleteItem }  \r\n                        onToggleImportant = {this.onToggleImportant}  //эта функция - отвечает за переключения state.important который будет у нас в каждом компоненте \r\n                        onToggleLiked = {this.onToggleLiked}    // эта функция будет отвечать за переключение state.like \r\n                        />  \r\n                <PostAddForm\r\n                        onAdd = {this.addItem}/>\r\n            </div>\r\n        );\r\n    }\r\n \r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './components/app/'; // если webpack не сказать какой файл искать а просто указать так папку то\r\n// он будет по умолчанию искать index.js и  мы можем использовать это в своей работе\r\n\r\n\r\nReactDOM.render(<App/>, document.getElementById('root'));\r\n"],"sourceRoot":""}